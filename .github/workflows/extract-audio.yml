name: Extract YouTube Audio

on:
  repository_dispatch:
    types: [extract-audio]

jobs:
  extract:
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up job
      run: echo "Starting YouTube audio extraction"
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install yt-dlp
      run: |
        pip install yt-dlp
    
    - name: Download and extract audio from YouTube
      run: |
        echo "Processing YouTube video: ${{ github.event.client_payload.VIDEO_TITLE }}"
        echo "YouTube URL: ${{ github.event.client_payload.VIDEO_URL }}"
        
        # Update yt-dlp to latest version (important for YouTube compatibility)
        pip install --upgrade yt-dlp
        
        YOUTUBE_URL="${{ github.event.client_payload.VIDEO_URL }}"
        
        echo "Attempting download with GitHub Actions optimized settings..."
        
        # Try with settings optimized for GitHub Actions / cloud environments
        if yt-dlp \
          --extract-audio \
          --audio-format mp3 \
          --audio-quality 0 \
          --output "audio_%(upload_date)s_%(id)s.%(ext)s" \
          --no-playlist \
          --geo-bypass \
          --user-agent "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" \
          --extractor-args "youtube:player_client=android,web" \
          --cookies-from-browser chrome:default \
          --ignore-errors \
          --no-warnings \
          "$YOUTUBE_URL" 2>&1 | tee download.log; then
          echo "✅ Download successful!"
        else
          echo "❌ Primary method failed. Trying alternative approaches..."
          
          # Alternative 1: Different user agent and headers
          if yt-dlp \
            --extract-audio \
            --audio-format mp3 \
            --output "audio_%(upload_date)s_%(id)s.%(ext)s" \
            --user-agent "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)" \
            --add-header "Accept-Language:en-US,en;q=0.9" \
            --extractor-args "youtube:player_client=ios" \
            --geo-bypass \
            "$YOUTUBE_URL"; then
            echo "✅ Alternative method 1 successful!"
          # Alternative 2: Mobile client
          elif yt-dlp \
            --extract-audio \
            --audio-format mp3 \
            --output "audio_%(upload_date)s_%(id)s.%(ext)s" \
            --user-agent "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)" \
            --extractor-args "youtube:player_client=mweb" \
            "$YOUTUBE_URL"; then
            echo "✅ Mobile client successful!"
          else
            echo "⚠️ All YouTube download methods failed."
            echo "This often happens with GitHub Actions IP ranges."
            echo ""
            echo "Fallback: Creating notification file instead..."
            
            # Create a text file with the video info for manual processing
            cat > "FAILED_DOWNLOAD_$(date +%Y%m%d_%H%M%S).txt" << EOF
YouTube Download Failed
=====================
Video URL: $YOUTUBE_URL
Video Title: ${{ github.event.client_payload.VIDEO_TITLE }}
Timestamp: $(date)
Reason: GitHub Actions IP may be blocked by YouTube

Manual Download Instructions:
1. Download this video manually using any YouTube downloader
2. Convert to MP3 format
3. Upload directly to your Libsyn account

Alternative: Try running this workflow again as YouTube blocking can be temporary.
EOF
            
            echo "📄 Created instruction file for manual processing"
          fi
        fi
        
        # Find the downloaded file (yt-dlp creates files with video title)
        AUDIO_FILE=$(find . -name "*.mp3" -type f | head -1)
        echo "Downloaded file: $AUDIO_FILE"
        
        # Create a clean filename for the episode
        CLEAN_TITLE="${{ github.event.client_payload.VIDEO_TITLE }}"
        CLEAN_TITLE=$(echo "$CLEAN_TITLE" | sed 's/[^a-zA-Z0-9 ]//g' | sed 's/ /_/g')
        EPISODE_FILENAME="episode_$(date +%Y%m%d_%H%M%S)_${CLEAN_TITLE}.mp3"
        
        # Rename the file
        mv "$AUDIO_FILE" "$EPISODE_FILENAME"
        
        echo "Final filename: $EPISODE_FILENAME"
        echo "EPISODE_FILENAME=$EPISODE_FILENAME" >> $GITHUB_ENV
        
        # Show file info
        ls -la *.mp3
        file "$EPISODE_FILENAME"

    - name: Upload to Libsyn via FTP
      run: |
        echo "Uploading to Libsyn FTP..."
        
        # Install lftp for FTP operations
        sudo apt-get update
        sudo apt-get install -y lftp
        
        # Upload the file
        lftp -c "
        set ftp:ssl-allow no;
        open ftp://${{ secrets.LIBSYN_FTP_USERNAME }}:${{ secrets.LIBSYN_FTP_PASSWORD }}@${{ secrets.LIBSYN_FTP_SERVER }};
        cd /;
        put $EPISODE_FILENAME;
        ls -la;
        quit
        "
        
        echo "✅ Successfully uploaded to Libsyn: $EPISODE_FILENAME"
        
        # Show next steps
        echo ""
        echo "Next steps:"
        echo "1. Go to your Libsyn dashboard" 
        echo "2. Create a new episode"
        echo "3. Select the uploaded file: $EPISODE_FILENAME"
        echo "4. Add title: ${{ github.event.client_payload.VIDEO_TITLE }}"

    - name: Cleanup
      run: |
        echo "Cleaning up temporary files..."
        rm -f *.mp3
        echo "✅ Cleanup completed"
    
    - name: Post Setup Python
      run: |
        echo "Post job cleanup."
    
    - name: Complete job
      run: |
        echo "Cleaning up orphan processes"
